/**
   @file pyiganet/pybspline@GEODIM@d.cxx

   @brief PyIgANet multivariate B-splines

   @author Matthias Moller

   @copyright This file is part of the IgANet project

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#include <pybind11/pybind11.h>
#include <pybind11/cast.h>
#include <pybind11/stl.h>
#include <pybind11_json/pybind11_json.hpp>
#include <torch/extension.h>

#include <boost/preprocessor/seq/for_each.hpp>

#include <pyconfig.hpp>

#include <bspline.hpp>

#define DEF(name, description)                                          \
  .def(#name,                                                           \
       &iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name, \
       description)

#define DEF_STATIC(name, description)                                   \
  .def_static(#name,                                                    \
              &iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name, \
              description)

#define DEF_OVERLOAD(name, description, ...)                                \
  .def(#name,                                                           \
       py::overload_cast<__VA_ARGS__>                                          \
       (&iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name), \
       description)

#define DEF_OVERLOAD_CONST(name, description, ...)                          \
  .def(#name,                                                           \
       py::overload_cast<__VA_ARGS__>                                          \
       (&iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name, \
        py::const_),                                                    \
       description)

#define DEF_STATIC_OVERLOAD(name, description, ...)                         \
  .def_static(#name,                                                           \
       py::overload_cast<__VA_ARGS__>                                          \
       (&iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name), \
       description)

#define DEF_STATIC_OVERLOAD_CONST(name, description, ...)                   \
  .def_static(#name,                                                           \
       py::overload_cast<__VA_ARGS__>                                          \
       (&iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>:: name, \
        py::const_),                                                    \
       description)

namespace py = pybind11;

void init_UniformBSpline@SUFFIX@(py::module_ &m) {
  py::class_<iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>>(m, "UniformBSpline@SUFFIX@")

    // Constructor
    .def(py::init<
         std::array<int64_t, @PARDIM@>,
         enum iganet::init>(),
         py::arg("ncoeffs"),
         py::arg("init") = iganet::init::greville,
         "Creates a uniform B-Spline object")

    // Property getters
    DEF(device, "Returns the `device` property")
    DEF(device_index, "Returns the `device_index` property")
    DEF(dtype, "Returns the `dtype` property")
    DEF(layout, "Returns the `layout` property")
    DEF(requires_grad, "Returns the `requires_grad` property")
    DEF(set_requires_grad, "Sets the `requires_grad` property")
    DEF(pinned_memory, "Returns the `pinned_memory` property")
    DEF(is_sparse, "Returns true of the layout is sparse")

    DEF_STATIC(is_uniform, "Returns true if the B-spline is uniform")
    DEF_STATIC(is_nonuniform, "Returns true if the B-spline is non-uniform")

    // Static getters
    DEF_STATIC(parDim, "Returns the parametric dimension")
    DEF_STATIC(geoDim, "Returns the geometric dimension")
    DEF_STATIC(degrees, "Returns the vector of polynomial degrees of all parametric dimensions")
    DEF_STATIC(degree, "Returns the polynomial degree of a specific parametric dimension")

    // Knots
    DEF_OVERLOAD(knots, "Returns a non-constant reference to the array of knot vectors")
    DEF_OVERLOAD(knots, "Returns a non-constant reference to the knot vector in the i-th dimension", iganet::short_t)
    DEF_OVERLOAD_CONST(knots, "Returns a constant reference to the array of knot vectors")
    DEF_OVERLOAD_CONST(knots, "Returns a constant reference to the knot vector in the i-th dimension", iganet::short_t)

    // Number of knots
    DEF_OVERLOAD_CONST(nknots, "Returns a constant reference to the array of knot vector dimensions")
    DEF_OVERLOAD_CONST(knots, "Returns the dimension of the knot vector in the i-th dimension", iganet::short_t)

    // Coefficients
    DEF_OVERLOAD(coeffs, "Returns a non-constant reference to the array of coefficient vectors")
    DEF_OVERLOAD(coeffs, "Returns a non-constant reference to the coefficient vector in the i-th dimension", iganet::short_t)
    DEF_OVERLOAD_CONST(coeffs, "Returns a constant reference to the array of coefficient vectors")
    DEF_OVERLOAD_CONST(coeffs, "Returns a constant reference to the coefficient vector in the i-th dimension", iganet::short_t)

    // Coefficients view
    //DEF_OVERLOAD_CONST(coeffs_view, "Returns an array of views to the coefficient vectors")
    //DEF_OVERLOAD_CONST(coeffs_view, "Returns an array of views to the coefficient vector in the i-th dimension", iganet::short_t)

    // Total number of coefficients
    DEF(ncumcoeffs, "Returns the total number of coefficients")

    // Number of coefficients
    DEF_OVERLOAD_CONST(ncoeffs, "Returns the coefficient vector dimensions as array")
    DEF_OVERLOAD_CONST(ncoeffs, "Returns the number of coefficients in the i-th direction", iganet::short_t)

    // Coefficients as a single tensor
    DEF(as_tensor, "Returns all coefficients as a single tensor")

    // Coefficients from a single tensor
    DEF(from_tensor, "Sets all coefficients from a single tensor")

    // Size of coefficients as a single tensor
    DEF(as_tensor_size, "Returns the size if the single tensor representation of all coefficients")

    // Greville points
    .def("greville",
         &iganet::UniformBSpline<pyiganet::real_t, @GEODIM@, @DEGREES@>::greville,
         py::arg("interior") = false,
         "Returns the Greville abscissae")

    // Evaluate B-splines from precomputed quantities
    DEF_OVERLOAD_CONST(eval_from_precomputed, "Returns the value of the B-spline object in the points xi",
                       const torch::Tensor&, const torch::Tensor&, int64_t, torch::IntArrayRef)
    DEF_OVERLOAD_CONST(eval_from_precomputed, "Returns the value of the B-spline object in the points xi",
                       const iganet::utils::TensorArray<@PARDIM@>&, const torch::Tensor&, int64_t, torch::IntArrayRef)

    // Evaluate B-splines
#define SEQ1 (func)(dx)(dx^2)(dx^3)(dx^4)
#define SEQ2 (func)(dx)(dx^2)(dx^3)(dx^4)(dy)(dy^2)(dy^3)(dy^4)
#define SEQ3 (func)(dx)(dx^2)(dx^3)(dx^4)(dy)(dy^2)(dy^3)(dy^4)(dz)(dz^2)(dz^3)(dz^4)
#define SEQ4 (func)(dx)(dx^2)(dx^3)(dx^4)(dy)(dy^2)(dy^3)(dy^4)(dz)(dz^2)(dz^3)(dz^4)(dt)(dt^2)(dt^3)(dt^4)

#define SEQ SEQ@PARDIM@
    .def("eval",
         [](const iganet::UniformBSpline<pyiganet::real_t,@GEODIM@, @DEGREES@>& self,
            const torch::Tensor& xi,
            const enum iganet::deriv deriv)
         {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wswitch"

           switch (deriv) {

#define    MACRO(r, data, elem)                                    \
             case (iganet::deriv::elem):                           \
               return self.eval<iganet::deriv::elem>(xi);

             BOOST_PP_SEQ_FOR_EACH(MACRO, _, SEQ)
#undef     MACRO

#pragma clang diagnostic pop

           default:
               throw std::runtime_error("Unsupported derivative");
           }
         },
         py::arg("xi"),
         py::arg("deriv") = iganet::deriv::func,
         "Returns the value of the B-spline object or its derivative in the points xi")

    .def("eval",
         [](const iganet::UniformBSpline<pyiganet::real_t,@GEODIM@, @DEGREES@>& self,
            const std::array<torch::Tensor,@PARDIM@>& xi,
            const enum iganet::deriv deriv)
         {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wswitch"

           switch (deriv) {

#define    MACRO(r, data, elem)                                    \
             case (iganet::deriv::elem):                           \
               return self.eval<iganet::deriv::elem>(xi);

             BOOST_PP_SEQ_FOR_EACH(MACRO, _, SEQ)
#undef     MACRO

#pragma clang diagnostic pop

           default:
               throw std::runtime_error("Unsupported derivative");
           }
         },
         py::arg("xi"),
         py::arg("deriv") = iganet::deriv::func,
         "Returns the value of the B-spline object or its derivative in the points xi")

    .def("eval",
         [](const iganet::UniformBSpline<pyiganet::real_t,@GEODIM@, @DEGREES@>& self,
            const std::array<torch::Tensor,@PARDIM@>& xi,
            const std::array<torch::Tensor,@PARDIM@>& indices,
            const enum iganet::deriv deriv)
         {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wswitch"

           switch (deriv) {

#define    MACRO(r, data, elem)                                     \
             case (iganet::deriv::elem):                            \
               return self.eval<iganet::deriv::elem>(xi, indices);

             BOOST_PP_SEQ_FOR_EACH(MACRO, _, SEQ)
#undef     MACRO

#pragma clang diagnostic pop

           default:
               throw std::runtime_error("Unsupported derivative");
           }
         },
         py::arg("xi"),
         py::arg("indices"),
         py::arg("deriv") = iganet::deriv::func,
         "Returns the value of the B-spline object or its derivative in the points xi")

    .def("eval",
         [](const iganet::UniformBSpline<pyiganet::real_t,@GEODIM@, @DEGREES@>& self,
            const std::array<torch::Tensor,@PARDIM@>& xi,
            const std::array<torch::Tensor,@PARDIM@>& indices,
            const torch::Tensor& coeff_indices,
            const enum iganet::deriv deriv)
         {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wswitch"

           switch (deriv) {

#define    MACRO(r, data, elem)                                         \
             case (iganet::deriv::elem):                                \
               return self.eval<iganet::deriv::elem>(xi, indices, coeff_indices);

             BOOST_PP_SEQ_FOR_EACH(MACRO, _, SEQ)
#undef     MACRO

#pragma clang diagnostic pop

           default:
               throw std::runtime_error("Unsupported derivative");
           }
         },
         py::arg("xi"),
         py::arg("indices"),
         py::arg("coeff_indices"),
         py::arg("deriv") = iganet::deriv::func,
         "Returns the value of the B-spline object or its derivative in the points xi")
    ;
}
