/**
   @file pyiganet/pyblocktensor.cxx

   @brief PyIgANet block tensors

   @author Matthias Moller

   @copyright This file is part of the IgANet project

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#include <pybind11/pybind11.h>
#include <pybind11_json/pybind11_json.hpp>
#include <torch/extension.h>

#include <boost/preprocessor.hpp>

#include <pyconfig.hpp>

#include <blocktensor.hpp>

namespace py = pybind11;

void init_BlockTensor@SUFFIX@(py::module_ &m) {
  py::class_<iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>>(m, "BlockTensor@SUFFIX@")
    
    // Constructors
    .def(py::init<>())

    // Static getters
    .def_static("dims",
                &iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>::dims,
                "Returns all dimensions as array")
    .def_static("dim",
                [](std::size_t i) {                  
                  switch(i) {
                    
#define           MACRO(r, elem, data)                \
                    case (elem):                      \
                      return iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>::dim<elem>();
                  BOOST_PP_REPEAT( 16, MACRO, _ )
#undef            MACRO
                    
                  default:
                      throw std::runtime_error("Unsupported block tensor dimension");
                  }
                },
                "Returns the i-th dimension")
    .def_static("size",
                &iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>::size,
                "Returns the number of dimensions")
    .def_static("entries",
                &iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>::entries,
                "Returns the total number of entries")

    // Access data
    .def("__getitem__",
         [](iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>& blockvector, std::size_t idx)
         { return blockvector(idx); },
         "Returns a non-constant reference to entry")
    .def("__setitem__",
         [](iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>& blockvector,
            std::size_t idx, torch::Tensor value)
         { return blockvector(idx) = value; },         
         "Returns a constant reference to entry")
    
    // Print
    .def("print",
         &iganet::BlockTensor<torch::Tensor, @ROWS@, @COLS@>::pretty_print,
         "Prints (as string) a compile-time block tensor object")    
    ;
}
